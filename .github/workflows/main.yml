name: goupang

on:
    push:
        branches:
            - main
    pull_request:
        types: [closed]

jobs:
    files-changed:
        name: detect what files changed
        runs-on: ubuntu-20.04
        timeout-minutes: 3
        outputs:
            auth: ${{steps.changes.outputs.auth}}
            host: ${{steps.changes.outputs.host}}
            noti: ${{steps.changes.outputs.noti}}
            order: ${{steps.changes.outputs.order}}
            payment: ${{steps.changes.outputs.payment}}
            product: ${{steps.changes.outputs.product}}
            shipment: ${{steps.changes.outputs.shipment}}
            user: ${{steps.changes.outputs.user}}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for services
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      auth: apps/src/auth
                      host: apps/src/host
                      noti: apps/src/noti
                      order: apps/src/order
                      payment: apps/src/payment
                      product: apps/src/product
                      shipment: apps/src/shipment
                      user: apps/src/user

    auth:
        if: needs.files-changed.outputs.auth == 'true'
        needs: files-changed
        name: Build and push auth Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for auth
              run: |
                  aws ecr create-repository --repository-name goupang/auth || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for auth
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/auth
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=auth --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/auth/Dockerfile ./apps/auth

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/auth
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    host:
        if: needs.files-changed.outputs.host == 'true'
        needs: files-changed
        name: Build and push host Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for host
              run: |
                  aws ecr create-repository --repository-name goupang/host || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for host
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/host
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=host --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/host/Dockerfile ./apps/host

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/host
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    noti:
        if: needs.files-changed.outputs.noti == 'true'
        needs: files-changed
        name: Build and push noti Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for noti
              run: |
                  aws ecr create-repository --repository-name goupang/noti || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for noti
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/noti
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=noti --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/noti/Dockerfile ./apps/noti

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/noti
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    order:
        if: needs.files-changed.outputs.order == 'true'
        needs: files-changed
        name: Build and push order Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for order
              run: |
                  aws ecr create-repository --repository-name goupang/order || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for order
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/order
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=order --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/order/Dockerfile ./apps/order

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/order
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    payment:
        if: needs.files-changed.outputs.payment == 'true'
        needs: files-changed
        name: Build and push payment Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for payment
              run: |
                  aws ecr create-repository --repository-name goupang/payment || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for payment
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/payment
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=payment --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/payment/Dockerfile ./apps/payment

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/payment
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    product:
        if: needs.files-changed.outputs.product == 'true'
        needs: files-changed
        name: Build and push product Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for product
              run: |
                  aws ecr create-repository --repository-name goupang/product || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for product
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/product
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=product --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/product/Dockerfile ./apps/product

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/product
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    shipment:
        if: needs.files-changed.outputs.shipment == 'true'
        needs: files-changed
        name: Build and push shipment Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for shipment
              run: |
                  aws ecr create-repository --repository-name goupang/shipment || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for shipment
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/shipment
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=shipment --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/shipment/Dockerfile ./apps/shipment

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/shipment
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    user:
        if: needs.files-changed.outputs.user == 'true'
        needs: files-changed
        name: Build and push user Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1
              with:
                  region: ap-northeast-2

            - name: Create ECR repository for user
              run: |
                  aws ecr create-repository --repository-name goupang/user || true
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Build Docker image for user
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/user
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=user --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/user/Dockerfile ./apps/user

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/user
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # build:
    #     needs: changes
    #     if: ${{ fromJson(needs.changes.outputs.projects) != '[]' }}
    #     strategy:
    #         matrix:
    #             package: ${{ fromJson(needs.changes.outputs.projects) }}
    #     runs-on: ubuntu-20.04
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v4

    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v2

    #         - name: Log in to Amazon ECR
    #           uses: aws-actions/amazon-ecr-login@v1
    #           with:
    #               region: ap-northeast-2

    #         - name: Build Docker image
    #           run: |
    #               for package in ${{ fromJson(needs.changes.outputs.projects) }}; do
    #                   export REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/$package
    #                   export IMAGE_TAG=latest
    #                   docker build --no-cache --build-arg APP_ENV=$package --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/$package/Dockerfile ./apps/$package
    #                   docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
    #                   docker push $REPO_NAME:$IMAGE_TAG
    #               done
    #           env:
    #               AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    #               AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #               AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
