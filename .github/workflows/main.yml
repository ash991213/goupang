name: goupang

on:
    push:
        branches-ignore:
            - main
    pull_request:
        branches:
            - feature/**
        types:
            - closed

permissions:
    id-token: write
    contents: read
    pull-requests: write

env:
    AWS_DEFAULT_REGION: ap-northeast-2
    S3_BUCKET_NAME: goupang-deploy-s3
    CODE_DEPLOYMENT_NAME: goupang-user

jobs:
    files-changed:
        name: Detect what files changed
        runs-on: ubuntu-20.04
        timeout-minutes: 3
        outputs:
            services: ${{ steps.path-filter.outputs.changes }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for services
              uses: dorny/paths-filter@v3
              id: path-filter
              with:
                  filters: |
                      auth: apps/auth/**
                      host: apps/host/**
                      noti: apps/noti/**
                      order: apps/order/**
                      payment: apps/payment/**
                      product: apps/product/**
                      shipment: apps/shipment/**
                      user: apps/user/**

    test:
        if: ${{ needs.files-changed.outputs.services != '[]' }}
        name: Run tests for service
        needs: files-changed
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                service: ${{ fromJSON(needs.files-changed.outputs.services) }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.6.0'

            - name: Install pnpm
              run: npm install -g pnpm@8.15.3

            - name: Install dependencies
              run: pnpm install

            - name: Run Jest tests for ${{ matrix.service }}
              run: pnpm ${{ matrix.service }} test:coverage

            - name: Upload test coverage
              if: success()
              uses: actions/upload-artifact@v3
              with:
                  name: test-coverage
                  path: apps/${{ matrix.service }}/src/coverage

    common-steps:
        if: ${{ needs.test.result == 'success' && needs.files-changed.outputs.services != '[]' }}
        name: Build Docker image and deploy with Code-Deploy
        needs: [test, files-changed]
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                service: ${{ fromJSON(needs.files-changed.outputs.services) }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
                  aws-region: ${{ env.AWS_DEFAULT_REGION }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create ECR repository for ${{ matrix.service }}
              run: |
                  aws ecr create-repository --repository-name goupang/${{ matrix.service }} || true

            - name: Copy .env.prod file
              run: |
                  mkdir -p libs/module/config/env/
                  echo '${{ secrets.GOUPANG_PEM }}' > libs/module/database/goupang.pem
                  echo '${{ secrets.COMMON_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > libs/module/config/env/.env.prod

                  mkdir -p apps/${{ matrix.service }}/env/
                  if [ "${{ matrix.service }}" = "auth" ]; then
                    echo '${{ secrets.AUTH_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "host" ]; then
                    echo '${{ secrets.NOTI_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "noti" ]; then
                    echo '${{ secrets.NOTI_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "order" ]; then
                    echo '${{ secrets.ORDER_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "payment" ]; then
                    echo '${{ secrets.PAYMENT_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "product" ]; then
                    echo '${{ secrets.PRODUCT_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "shipment" ]; then
                    echo '${{ secrets.SHIPMENT_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  elif [ "${{ matrix.service }}" = "user" ]; then
                    echo '${{ secrets.USER_PROD_ENV }}' | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' > apps/${{ matrix.service }}/env/.env.prod
                  fi

            - name: Build Docker image for ${{ matrix.service }}
              run: |
                  IMAGE_TAG=latest
                  REPO_NAME=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/goupang/${{ matrix.service }}
                  docker build --no-cache --build-arg APP_ENV=${{ matrix.service }} --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/${{ matrix.service }}/Dockerfile .

            - name: Push Docker image to ECR
              run: |
                  IMAGE_TAG=latest
                  REPO_NAME=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/goupang/${{ matrix.service }}
                  docker push $REPO_NAME:$IMAGE_TAG

            - name: Create deployment package
              run: |
                  mkdir -p deployment_package/scripts
                  cp apps/${{ matrix.service }}/appspec.yml deployment_package/
                  cp apps/${{ matrix.service }}/scripts/pull_and_run.sh deployment_package/scripts/
                  cp apps/${{ matrix.service }}/docker-compose.yml deployment_package/
                  cp apps/${{ matrix.service }}/nginx.conf deployment_package/

                  cd deployment_package
                  zip -r ../deployment_package.zip .
                  cd ..

            - name: Upload to S3
              run: |
                  aws s3 cp --region ${{ env.AWS_DEFAULT_REGION }} deployment_package.zip s3://$S3_BUCKET_NAME/${{ matrix.service }}/deployment_package.zip

            - name: Deploy to CodeDeploy
              run: |
                  aws deploy create-deployment \
                  --deployment-config-name CodeDeployDefault.AllAtOnce \
                  --application-name ${{ env.CODE_DEPLOYMENT_NAME }} \
                  --deployment-group-name goupang-${{ matrix.service }} \
                  --s3-location "bucket=$S3_BUCKET_NAME,key=${{ matrix.service }}/deployment_package.zip,bundleType=zip"

    create-pull-request:
        if: ${{ github.event_name == 'push' }}
        name: Create Pull Request
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Create pull request
              uses: thomaseizinger/create-pull-request@master
              with:
                  github_token: ${{ secrets.CREATE_PULL_REQUEST_TOKEN }}
                  head: ${{ github.ref }}
                  base: main
                  title: 'An automatically created pull request'
                  body: |
                      ## 🚀 자동 생성된 풀 리퀘스트

                      이 풀 리퀘스트는 CI 파이프라인에 의해 자동으로 생성되었습니다.

                      ### ✅ 검토 및 승인 요청
                      - **리뷰어:** 확인이 필요합니다! 🙏
                      - 병합하려면 최소 **1명의 승인**이 필요합니다.

                      ### 🔍 변경 사항 개요
                      - [ ] 모든 테스트가 통과하는지 확인하세요.
                      - [ ] 코드 변경 사항을 철저히 검토하세요.
                      - [ ] 필요에 따라 피드백을 제공하세요.

                      ### 📢 알림
                      - 풀 리퀘스트 담당자에게 슬랙 메시지가 전송되었습니다. 📬
