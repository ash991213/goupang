name: goupang

on:
    push:
        branches-ignore:
            - main
    pull_request:
        types: [closed]
        branches:
            - main

permissions:
    id-token: write
    contents: read
    pull-requests: write

env:
    AWS_DEFAULT_REGION: ap-northeast-2
    S3_BUCKET_NAME: goupang-deploy-s3
    CODE_DEPLOYMENT_NAME: goupang-user
    USER_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: goupang-user
    NOTI_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: goupang-noti

jobs:
    files-changed:
        name: detect what files changed
        runs-on: ubuntu-20.04
        timeout-minutes: 3
        outputs:
            auth: ${{steps.changes.outputs.auth}}
            host: ${{steps.changes.outputs.host}}
            noti: ${{steps.changes.outputs.noti}}
            order: ${{steps.changes.outputs.order}}
            payment: ${{steps.changes.outputs.payment}}
            product: ${{steps.changes.outputs.product}}
            shipment: ${{steps.changes.outputs.shipment}}
            user: ${{steps.changes.outputs.user}}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for services
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      auth: apps/auth/**
                      host: apps/host/**
                      noti: apps/noti/**
                      order: apps/order/**
                      payment: apps/payment/**
                      product: apps/product/**
                      shipment: apps/shipment/**
                      user: apps/user/**

            - name: Debug paths-filter output
              run: |
                  echo "Auth changed: ${{ steps.changes.outputs.auth }}"
                  echo "Host changed: ${{ steps.changes.outputs.host }}"
                  echo "Noti changed: ${{ steps.changes.outputs.noti }}"
                  echo "Order changed: ${{ steps.changes.outputs.order }}"
                  echo "Payment changed: ${{ steps.changes.outputs.payment }}"
                  echo "Product changed: ${{ steps.changes.outputs.product }}"
                  echo "Shipment changed: ${{ steps.changes.outputs.shipment }}"
                  echo "User changed: ${{ steps.changes.outputs.user }}"

    user:
        if: ${{ needs.files-changed.outputs.user == 'true' && github.event.pull_request.merged == true }}
        needs: files-changed
        name: Build and push user Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
                  aws-region: ${{ env.AWS_DEFAULT_REGION }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create ECR repository for user
              run: |
                  aws ecr create-repository --repository-name goupang/user || true

            - name: Create .env.prod file
              run: |
                  {
                    echo ""
                    echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
                    echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
                    echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
                    echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
                  } >> apps/user/env/.env.prod

            - name: Build Docker image for user
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/user
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=user --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/user/Dockerfile .

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/user
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG

            - name: Create deployment package
              run: |
                  mkdir -p deployment_package/scripts
                  mkdir -p deployment_package/env
                  cp apps/user/appspec.yml deployment_package/
                  cp apps/user/scripts/pull_and_run.sh deployment_package/scripts/
                  cp apps/user/docker-compose.yml deployment_package/
                  cp apps/user/nginx.conf deployment_package/
                  cp -r apps/user/db deployment_package/
                  cp apps/user/env/.env.prod deployment_package/env/
                  cd deployment_package
                  zip -r ../deployment_package.zip .
                  cd ..

            - name: Upload to S3
              run: |
                  aws s3 cp --region ${{ env.AWS_DEFAULT_REGION }} deployment_package.zip s3://$S3_BUCKET_NAME/user/deployment_package.zip

            - name: Deploy to CodeDeploy
              run: |
                  aws deploy create-deployment \
                  --deployment-config-name CodeDeployDefault.AllAtOnce \
                  --application-name ${{ env.CODE_DEPLOYMENT_NAME }} \
                  --deployment-group-name ${{ env.USER_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
                  --s3-location "bucket=$S3_BUCKET_NAME,key=user/deployment_package.zip,bundleType=zip"

    user-tests:
        if: ${{ github.event_name == 'push' && needs.files-changed.outputs.user == 'true' }}
        needs: files-changed
        name: Run Jest Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.6.0'

            - name: Install pnpm
              run: npm install -g pnpm@8.15.3

            - name: Install dependencies
              run: pnpm install

            - name: Run Jest tests
              run: pnpm user test:coverage

            - name: Upload test coverage
              if: success()
              uses: actions/upload-artifact@v3
              with:
                  name: test-coverage
                  path: apps/user/src/coverage

    noti:
        if: ${{ needs.files-changed.outputs.noti == 'true' && github.event.pull_request.merged == true }}
        needs: files-changed
        name: Build and push noti Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
                  aws-region: ${{ env.AWS_DEFAULT_REGION }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create ECR repository for noti
              run: |
                  aws ecr create-repository --repository-name goupang/noti || true

            - name: Create .env.prod file
              run: |
                  {
                    echo ""
                    echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
                    echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
                    echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
                    echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
                  } >> apps/noti/env/.env.prod

            - name: Build Docker image for noti
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/noti
                  IMAGE_TAG=latest
                  docker build --no-cache --build-arg APP_ENV=noti --build-arg NODE_ENV=prod -t $REPO_NAME:$IMAGE_TAG -f apps/noti/Dockerfile .

            - name: Push Docker image to ECR
              run: |
                  REPO_NAME=262872842537.dkr.ecr.ap-northeast-2.amazonaws.com/goupang/noti
                  IMAGE_TAG=latest
                  docker tag $REPO_NAME:$IMAGE_TAG $REPO_NAME:$IMAGE_TAG
                  docker push $REPO_NAME:$IMAGE_TAG

            - name: Create deployment package
              run: |
                  mkdir -p deployment_package/scripts
                  mkdir -p deployment_package/env
                  cp apps/noti/appspec.yml deployment_package/
                  cp apps/noti/scripts/pull_and_run.sh deployment_package/scripts/
                  cp apps/noti/docker-compose.yml deployment_package/
                  cp apps/noti/nginx.conf deployment_package/
                  cp -r apps/noti/db deployment_package/
                  cp apps/noti/env/.env.prod deployment_package/env/
                  cd deployment_package
                  zip -r ../deployment_package.zip .
                  cd ..

            - name: Upload to S3
              run: |
                  aws s3 cp --region ${{ env.AWS_DEFAULT_REGION }} deployment_package.zip s3://$S3_BUCKET_NAME/noti/deployment_package.zip

            - name: Deploy to CodeDeploy
              run: |
                  aws deploy create-deployment \
                  --deployment-config-name CodeDeployDefault.AllAtOnce \
                  --application-name ${{ env.CODE_DEPLOYMENT_NAME }} \
                  --deployment-group-name ${{ env.NOTI_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
                  --s3-location "bucket=$S3_BUCKET_NAME,key=noti/deployment_package.zip,bundleType=zip"

    noti-tests:
        if: ${{ github.event_name == 'push' && needs.files-changed.outputs.noti == 'true' }}
        needs: files-changed
        name: Run Jest Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.6.0'

            - name: Install pnpm
              run: npm install -g pnpm@8.15.3

            - name: Install dependencies
              run: pnpm install

            - name: Run Jest tests
              run: pnpm noti test:coverage

            - name: Upload test coverage
              if: success()
              uses: actions/upload-artifact@v3
              with:
                  name: test-coverage
                  path: apps/noti/src/coverage

    create-pull-request:
        if: ${{ github.event_name =='push' }}
        name: Create Pull Request
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Create pull request
              uses: thomaseizinger/create-pull-request@master
              with:
                  github_token: ${{secrets.CREATE_PULL_REQUEST_TOKEN}}
                  head: ${{github.ref}}
                  base: main
                  title: 'An automatically created pull request'
                  body: |
                      ## 🚀 자동 생성된 풀 리퀘스트

                      이 풀 리퀘스트는 CI 파이프라인에 의해 자동으로 생성되었습니다.

                      ### ✅ 검토 및 승인 요청
                      - **리뷰어:** 확인이 필요합니다! 🙏
                      - 병합하려면 최소 **1명의 승인**이 필요합니다.

                      ### 🔍 변경 사항 개요
                      - [ ] 모든 테스트가 통과하는지 확인하세요.
                      - [ ] 코드 변경 사항을 철저히 검토하세요.
                      - [ ] 필요에 따라 피드백을 제공하세요.

                      ### 📢 알림
                      - 풀 리퀘스트 담당자에게 슬랙 메시지가 전송되었습니다. 📬
